{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Courier New;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\f0\fs22\lang2057 === THANKS ===\par
\par
Thank YOU so much for supporting a fellow developer just like you by purchasing this asset! Please feel free to follow me on Twitter - @DomFeargrieve\par
Special thanks to my wonderful wife Vix and loyal pups Ozzy & Isla <3\par
\par
=== CREDIT ATTRIBUTION & LEGAL ===\par
\par
All models, textures, code, etc used in this asset are original creations made by the asset author and have no prior copyright. This asset in its entirety is provided as is under the Unity Technologies Asset Store EULA. Credit attribution is not required to be given for any commercial product usage of this package however if you would like to, credit would be much appreciated as "Dominic Feargrieve - {{\field{\*\fldinst{HYPERLINK https://feargrieve.dev }}{\fldrslt{https://feargrieve.dev\ul0\cf0}}}}\f0\fs22 ". Please include both name AND website URL. \par
\par
=== COMPATIBILITY ===\par
\par
This asset has been developed and tested on Unity version 2020.3.32f1 but should work with any URP compatible Unity editor version. It is URP compatible ONLY and has been verified with 10.8.1 and with Shader Graph version 10.8.1. Your mileage may vary with newer or older versions of URP and Shader Graph and guarantee CANNOT be given for how well the asset works with later iterations of Unity, URP or Shader Graph.\par
\par
=== SETUP ===\par
\par
1. Open up the 'DEMOScene' scene inside the Scenes folder then press the Play button\par
\par
2. This is an example of how the shader can be used. Move the mouse to see the card follow the movement. Stop Unity and in the scene view select and open the 'HolographicCard' game object and its children.\par
\par
\tab a. CardFrame - this is the sprite which contains the frame of the card and the backgrounds behind the card text. The 'HolographicCardMat' material on this has the main holographic shader assigned to it which can be fully customised. \par
\tab b. CardWindow - this is the quad which acts as the window of the card. It has two materials on it: CardWindowMat which has the stencil shader assigned & CardWindowShimmerEffectMat which has the rainbow and sparkle holographic effect shader assigned which can be fully customised.\par
\tab c. CardBackground - this is a plane which is masked out by the stencil renderer feature and provides an animated swirling effect behind the tentacle in the card window. This can be customised or completely replaced. Any background used though MUST be assigned the 'CardObject' layer.\par
\tab d. HP_GlitchText - this is a quad for the 'Hit Points' of the card, offset a small distance away from the surface of the card and has a glitch shader assigned to provide a distorted, glitch effect shader to the 3D text to suggest text on a retro CRT computer screen. The number may be changed by updating the image under the Texture2D variable or it can be replaced by anything you want.\par
\tab e.  Title_GlitchText - this is a quad for the title/name of the card, offset a small distance away from the surface of the card and has a glitch shader assigned to provide a distorted, glitch effect shader to the 3D text to suggest text on a retro CRT computer screen. The title may be changed by updating the image under the Texture2D variable or it can be replaced by anything you want.\par
\tab f. Flavour_GlitchText - this is a quad for the 'flavour' text at the bottom of the card, offset a small distance away from the surface of the card and has a glitch shader assigned to provide a distorted, glitch effect shader to the 3D text to suggest text on a retro CRT computer screen. The text may be changed by updating the image under the Texture2D variable or it can be replaced by anything you want.\par
\tab g. Tentacle - this is a simple 3D model to demonstrate that you can place any 3D object you like to reside 'inside' the card. Any object placed here MUST be assigned the 'CardObject' layer in order to appear only through the card window.\par
\par
3. Click on CardFrame and access the properties on the 'HolographicCardMat' material and notice the shader assigned 'HolographicCardShader' - this is the core of the asset and the variables exposed in the shader are the aspects which can be customised to your needs:\par
\tab a. MainTex - the main texture as required by the Sprite Renderer. The main texture used by the Sprite Renderer should be BlankCardFrame sprite.\par
\tab b. DistortTexture - this is the texture which provides the foil effect around the border of the card which changes with the viewer's perspective.\par
\tab c. DistortTilingAndOffset - controls the tiling and offset amount of the distort texture.\par
\tab d. DistortionStrength - this control the amount of noise which is given to the gradient applied to the distort texture.\par
\tab e. DistortionEffectTimeMulti - this controls the speed of a noise mask which scrolls over the circuit board effect at the top and bottom of the card.\par
\tab f. GradientTexture - this texture is a simple gradient between black, red and purple which is tiled and added to the border frame of the card.\par
\tab g. GradientTiling - controls the tiling of the gradient texture.\par
\tab h. GradientRotation - this controls the rotation of the gradient texture.\par
\tab i. CardFrameMaskTexture - this is a texture which acts as a mask to ensure that the text elements are not effected by other effects so that they may have their own effects applied. This should be assigned the 'BlankCardMaskTex' texture.\par
\tab j. CircuitBoardEffectColour - determines the colour of the animated circuit board effect behind the text elements of the card.\par
\tab k. NoiseScale - controls the amount of noise used to mask out the animated circuit board effect.\par
\tab l. CircuitBoardTex - the texture used for the circuit board effect background.\par
\tab m. CircuitTiling - controls the tiling amount for the circuit board texture.\par
\tab n. NoiseSmoothstep - this controls a smoothstep value for an animated glowing noise effect on the text elements.\par
\par
4. Now click on the CardWindow object and access the properties on the 'CardWindowShimmerEffectMat' material. The effects here are intended to be faint but shiny reflective effects which appear on the window surface. The variables exposed in the 'CardWindowShader' are the aspects which can be customised to your needs:\par
\par
\tab a. MainTexture - the texture which appears on the front of the card window. Sparkles are used by default to give the card the suggestion of rarity & shinyness but could be changed to anything you like.\par
\tab b. DistortTexture - a texture which is applied to the gradient banding to make it less uniform. \par
\tab c. DistortTilingAndOffset - controls the tiling and offset amount of the distort texture.\par
\tab d. DistortionStrength - the amount by which the above texture is applied.\par
\tab e. Tiling - controls the tiling of the gradient texure.\par
\tab f. Rotation - controls the rotation amount for the gradient texture.\par
\tab g. GradientTexture - the texture used by default to provide a rainbow banding effect. \par
\tab h. EffectsStrength - the overall power of the effect being applied to the card window.\par
\par
5. On the same object notice the CardWindowMat and observe the properties associated on the CardWindowStencil shader. The only variable here is 'StencilReference'. By default this is set to '2' and it should always match the stencil index value in the Overrides section on the CardStencil renderer feature which can be found on the ForwardRenderer asset in the Settings folder. \par
\par
6. Now click the CardBackground object. On this plane there is CardBackgroundMat with the SwirlyBackgroundShader. The variables exposed are the aspects which can be customised to your needs:\par
\par
\tab a. FirstTexture - the primary texture which is blended with the second texture.\par
\tab b. SecondTexture - the secondary texture which is blended with the first texture.\par
\tab c. FirstTexSpeed - the speed at which the first texture moves.\par
\tab d. SecondTexSpeed - the speed at which the second texture moves.\par
\tab e. TwirlStrength - the amount of twirling which occurs for both textures.\par
\tab f. EffectStrength - the overall power of the effect. Best kept to '1'.\par
\par
6. Now click on the 'HP_GlitchText' object. On the GlitchHPTextMat is the shader TextGlitch1. This is the only text element which has a slightly different effect, the TextGlitch1 shader provides more variables to control scan-lines similar to a retro CRT computer screen:\par
\par
\tab a. Texture2D - the image which the glitch effect is being applied to.\par
\tab b. Color - the colour tint applied to the effect.\par
\tab c. Speed - the speed multiplier for the scan lines\par
\tab d. ScrollLines - the amount of primary scan lines.\par
\tab e. Fraction - the frequency of scan lines.\par
\tab f. Power - the amount of contrast on the scan lines.\par
\tab g. FresnelStrength -  the power of the fresnel effect.\par
\tab h. GlitchAmount - the frequency of the glitching effect.\par
\tab i. GlitchStrength - the strength of the glitching effect. \par
\tab j. GlitchSpeed - the speed at which the glitch effect glitches.\par
\tab k. GlitchLines - the number of displacing glitch lines.\par
\par
7. If you click on 'Title_GlitchText' and 'Flavour_GlitchText' both materials on these have a similar shader with some of the same properties above.\par
\par
8. Now select the 'Tentacle' object, on the TentacleMat is the shader TentacleMovementAndGlow. \par
\par

\pard\li720 a. MainTex - the main image texture for the tentacle.\par
b. NormalMap - an optional normal map for the main image texture for the tentacle.\par
c. TilingAndOffset - controls the tiling and the offset for the texture.\par
d. Emission - an optional emission map for the tentacle.\par
e. TimeMulti - controls the frequency of the glowing pulse.\par
f. MinMax - the minimum and maximum ranges for the magnitude of the glowing pulse.\par
g. Color - the glow colour.\par
h. TentacleMoveSpeed - the speed at which the tentacle moves.\par
i. TentacleMoveNoiseDensity - the density of the noise sampled for how much the tentacle moves.\par
j. TentacleMoveStrength - the overall amount that the tentacle moves.\par
\par

\pard 9. Click to select the 'PPFX' object. This is where the post-processing effects can be added and altered. By default there are some post exposure, saturation and bloom effects but you can remove these, tweak them or add further overrides to add more effects.\par
\par
10. Finally, click into the 'Settings' folder within the 'Assets' folder and select the 'ForwardRenderer' asset. In the inspector window you can see a renderer feature added by default called 'Card Stencil (Render Objects)'. This custom render feature is what drives the stencil effect in tandem with the stencil shader on the card window. The default settings here should NOT be changed, always ensure that Event is set to AfterRenderingOpaques, Queue is set to Opaque, LayerMask is set to CardObject, Stencil is checked, Stencil Value is set to 2, Compare Function is set to Equal and the Pass, Fail and Z Fail are set to Keep.\par
\par
=== SUPPORT ===\par
\par
Any questions, feedback or issues can be reported to: domfeargrieve@gmail.com\par
I will do my best to reply in a timely manner but no assurance is given to the speed of the reply.\par
\par
v1.0.0\par
Mar 2023\par

\pard\sa200\sl276\slmult1\f1\lang9\par
}
 